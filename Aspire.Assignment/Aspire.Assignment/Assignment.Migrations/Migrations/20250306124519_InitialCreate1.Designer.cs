// <auto-generated />
using System;
using Assignment.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Migrations.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250306124519_InitialCreate1")]
    partial class InitialCreate1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportingManagerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CandidateId");

                    b.HasIndex("ReportingManagerId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelCoordinator", b =>
                {
                    b.Property<int>("PanelCoordinatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AllocationEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AllocationStartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PanelMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PanelCoordinatorId");

                    b.HasIndex("PanelMemberId");

                    b.HasIndex("UserId");

                    b.ToTable("PanelCoordinators");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelMember", b =>
                {
                    b.Property<int>("PanelMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PanelMemberId");

                    b.HasIndex("UserId");

                    b.ToTable("PanelMembers");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.ReportingManager", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("ReportingManagers");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AvailableEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AvailableStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BookedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CandidateId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsManagerAttending")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PanelMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReportingManagerId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("SlotId");

                    b.HasIndex("BookedBy");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PanelMemberId");

                    b.HasIndex("ReportingManagerId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TAAdmin", b =>
                {
                    b.Property<int>("TAAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TAAdminId");

                    b.HasIndex("UserId");

                    b.ToTable("TAAdmins");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TARecruiter", b =>
                {
                    b.Property<int>("TARecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TARecruiterId");

                    b.HasIndex("UserId");

                    b.ToTable("TARecruiters");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Candidate", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.ReportingManager", "ReportingManager")
                        .WithMany("Candidates")
                        .HasForeignKey("ReportingManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportingManager");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelCoordinator", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.PanelMember", "PanelMember")
                        .WithMany()
                        .HasForeignKey("PanelMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Contracts.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PanelMember");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelMember", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.ReportingManager", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Slot", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.TARecruiter", "TARecruiter")
                        .WithMany()
                        .HasForeignKey("BookedBy");

                    b.HasOne("Assignment.Contracts.Data.Entities.Candidate", "Candidate")
                        .WithMany("Slots")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Contracts.Data.Entities.PanelMember", "PanelMember")
                        .WithMany("Slots")
                        .HasForeignKey("PanelMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Contracts.Data.Entities.ReportingManager", "ReportingManager")
                        .WithMany("Slots")
                        .HasForeignKey("ReportingManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("PanelMember");

                    b.Navigation("ReportingManager");

                    b.Navigation("TARecruiter");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TAAdmin", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TARecruiter", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Users", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Candidate", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelMember", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.ReportingManager", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Slots");
                });
#pragma warning restore 612, 618
        }
    }
}
